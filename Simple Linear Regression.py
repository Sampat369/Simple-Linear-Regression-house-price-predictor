# -*- coding: utf-8 -*-
"""Slr.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tHgbuSF12Yc6kMl4b5kB0qEmW-yakxqU
"""

import numpy as np
import pandas as pd

"""Simple linear regression"""

import pandas as pd
from google.colab import files

# Upload the CSV file
uploaded = files.upload()

# Load into pandas
df = pd.read_csv("house_prices_synthetic.csv")

# Print the dataset
# prints the whole DataFrame (may be long)
print(df.head())   # prints first 5 rows
 # prints (rows, columns)

df.head(10)
df.tail(10)

df.describe().T

"""Seaborn"""

import seaborn as sns
sns.displot(df["price"])

sns.histplot(df["age"])
df=df.drop_duplicates()
df=df.drop("city",axis=1)
df.info()

df.corr()["price"]#negative inversely portional and positive directly proportional

"""Visualizing variables"""

x=pd.DataFrame(df[["square_feet","bedrooms"]])
y=pd.DataFrame(df["price"])
x

print(x.size,y.size)
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=23)
#test_size=0.2 means 20% data are going to testing data rest to training
#random_state=23 any number it gives consistent accuracy

print(x_test.shape)
print(x_train.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(x_train,y_train)

print(regressor.intercept_) #y=mx+c ,here c will print

print(regressor.coef_) #y=mx+c coef is m will print

"""Equation is now price=537.059*square_feet +71185.2526 ->this is previous one when I did program for only square feet now I involved both square feet and bedrooms now equation is ->price=392.83*square_feet+90046*bedrooms+58288"""

y_pred=regressor.predict(x_test)
#all x_test is tested on basis of y=mx+c and y value is stored in y_pred

y_pred=pd.DataFrame(y_pred, columns=['predicted'])
y_pred
#y_pred was array now it is data frame

df_pred = pd.DataFrame(columns=['actual','pred'])
df_pred['actual']=y_test.reset_index()['price']
df_pred['pred']=y_pred.reset_index()['predicted']
df_pred

df_pred['error']=df_pred.actual-df_pred.pred
df_pred

from sklearn import metrics
import numpy as np
print('mean absolute error:', metrics.mean_absolute_error(y_test,y_pred))
print('mean squared error:',metrics.mean_squared_error(y_test,y_pred))
print('Root means squared error:',np.sqrt(metrics.mean_squared_error(y_test,y_pred)))
metrics.mean_absolute_percentage_error(y_test,y_pred)*100

from sklearn.metrics import r2_score
r2_score(y_test,y_pred)

"""Multiple linear regression"""

import pandas as pd
from google.colab import files

# Upload the CSV file
uploaded = files.upload()

# Load into pandas
df2 = pd.read_csv("house_prices_synthetic.csv")

# Print the dataset
# prints the whole DataFrame (may be long)
print(df.head())   # prints first 5 rows
 # prints (rows, columns)

df2=df2.drop("city",axis=1)
df2.head()

x=pd.DataFrame(df2.iloc[:,:-1])
y=pd.DataFrame(df2.iloc[:,-1])
#y is my target i.e price
#x is all other features

print(x.size,y.size)
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=5)
print(x_test.shape)
print(x_train.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(x_train,y_train)

regressor.coef_

regressor.intercept_

v=pd.DataFrame(regressor.coef_,index=['co-efficient']).transpose()
w=pd.DataFrame(x.columns,columns=['attribute'])
#regressor.coeff is a array
v

w

coeff_df=pd.concat([w,v],axis=1,join='inner')
coeff_df

y_pred=regressor.predict(x_test)
y_pred=pd.DataFrame(y_pred,columns=['predicted'])
y_pred

from sklearn import metrics
import numpy as np
print('mean absolute error:', metrics.mean_absolute_error(y_test,y_pred))
print('mean squared error:',metrics.mean_squared_error(y_test,y_pred))
print('Root means squared error:',np.sqrt(metrics.mean_squared_error(y_test,y_pred)))
metrics.mean_absolute_percentage_error(y_test,y_pred)*100

from sklearn.metrics import r2_score
r2_score(y_test,y_pred)